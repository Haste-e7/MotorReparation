@using MotorReparation.Client.Services.IServices
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ILocalStorageService localStorage
@inject IJSRuntime JsRuntime

<div class="row mt-2 mb-5 shadow-lg">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="LaborUnit" OnSubmit="()=>HandleLaborUnitUpsert(TicketId)">
                    <div class="form-group">
                        <label>EmployeeId</label>
                        <InputText @bind-Value="LaborUnit.EmployeeId" class="form-control"></InputText> @* auto populate *@
                    </div>
                    <div class="form-group">
                        <label>LaborRate</label>
                        <InputNumber @bind-Value="LaborUnit.LaborRate" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Hour</label>
                        <InputNumber @bind-Value="LaborUnit.Hour" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>CreatedDate</label>
                        <p class="form-control">@LaborUnit.CreatedDate</p> @* auto gen *@
                    </div>
                    <div class="form-group">
                        <label>CreatedBy</label>
                        <p class="form-control">@LaborUnit.CreatedBy</p>
                    </div>
                    <div class="form-group">
                        <label>LastModifiedDate</label>
                        <p class="form-control">@LaborUnit.LastModifiedDate</p> @* auto gen *@
                    </div>
                    <div class="form-group">
                        <label>LastModifiedBy</label>
                        <p class="form-control">@LaborUnit.LastModifiedBy</p>
                    </div>
                    @if (LaborUnit.Id > 0)
                    {
                        <div class="form-group">
                            <button class="btn btn-primary disabled">Edit LaborUnit</button>
                            <button class="btn btn-danger" @onclick="()=>HandleDelete(LaborUnit.Id)">Delete</button>
                        </div>
                    }
                    else
                    {
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Save changes</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    }
                </EditForm>
            </div>
        </div>
    </div>

</div>

@code {
    [Parameter]
    public int TicketId { get; set; }
    [Parameter]
    public Ticket Ticket { get; set; } = new Ticket();
    [Parameter]
    public EventCallback<Ticket> TicketChanged { get; set; }
    [Parameter]
    public LaborUnit LaborUnit { get; set; } = new LaborUnit();
    private string Action { get; set; } = "Create";

    protected override async Task OnInitializedAsync()
    {

        //load employee
    }
    private async Task HandleLaborUnitUpsert(int Id)
    {
        var userDTO = await localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
        if (LaborUnit.Id == 0)
        {
            LaborUnit.CreatedDate = DateTime.UtcNow;
            LaborUnit.CreatedBy = userDTO.Id;
            LaborUnit.LastModifiedDate = DateTime.UtcNow;
            LaborUnit.LastModifiedBy = userDTO.Id;
            LaborUnit.TicketId = TicketId;
            var result = await HttpClient.PostAsJsonAsync($"api/LaborUnit", LaborUnit);
            if (result != null)
            {
                LaborUnit.Id = int.Parse(await result.Content.ReadAsStringAsync());
                Ticket.LaborUnits.Add(LaborUnit);
                Ticket.LastModifiedDate = DateTime.UtcNow;
                Ticket.LastModifiedBy = userDTO.Id;
                await UpdateTicketFromLaborUnit();
                await JsRuntime.InvokeVoidAsync("ShowSwal", "success", "Task completed successfully!");
            }
            LaborUnit = new LaborUnit();
        }
        else
        {
            LaborUnit.LastModifiedDate = DateTime.UtcNow;
            LaborUnit.LastModifiedBy = userDTO.Id;
            var result = await HttpClient.PutAsJsonAsync($"api/LaborUnit?id={LaborUnit.Id}", LaborUnit);
            if (result != null)
            {
                Ticket.LaborUnits = Ticket.LaborUnits.Where(x => x.Id != LaborUnit.Id).ToList();
                Ticket.LaborUnits.Add(LaborUnit);
                Ticket.LastModifiedDate = DateTime.UtcNow;
                Ticket.LastModifiedBy = userDTO.Id;
                await UpdateTicketFromLaborUnit();
                await JsRuntime.InvokeVoidAsync("ShowSwal", "success", "Task completed successfully!");
            }
            LaborUnit = new LaborUnit();
        }
    }
    private async Task HandleDelete(int id)
    {
        if (id != null)
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
            if (confirmed)
            {
                var result = await HttpClient.DeleteAsync($"api/LaborUnit?id={id}");
                if (result != null)
                {
                    Ticket.LaborUnits = Ticket.LaborUnits.Where(x => x.Id != id).ToList();
                    await UpdateTicketFromLaborUnit();
                }
                await JsRuntime.InvokeVoidAsync("ShowSwal", "success", "Task completed successfully!");
            }
        }
    }
    private async Task UpdateTicketFromLaborUnit()
    {
        await TicketChanged.InvokeAsync(Ticket);
    }
}
