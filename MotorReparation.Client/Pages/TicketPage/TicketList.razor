@page "/ticket"

@using MotorReparation.Client.Services.IServices
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject ILocalStorageService localStorage

@attribute [Authorize(Roles = SD.Role_Customer + "," + SD.Role_Admin)]

@if(Tickets == null)
{
    <h3>Loading...</h3>
}
else
{
    <div class="row mt-4">
        <div class="col-8">
            <h4 class="card-title text-info">Ticket List</h4>
        </div>
        <div class="col-3 offset-1">
            <NavLink href="ticket/create" class="btn btn-info form-control mb-4">Add New Ticket</NavLink>
        </div>
    </div>
    <RadzenGrid AllowFiltering="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterMode="FilterMode.Advanced" AllowPaging="true" PageSize="4"
                AllowSorting="true" Data="@Tickets" TItem="Ticket" ColumnWidth="200px" FilterValue="Id">
        <Columns>
            <RadzenGridColumn TItem="Ticket" Property="Id" Title="Id" />
            <RadzenGridColumn TItem="Ticket" Property="Title" Title="Title" />
            <RadzenGridColumn TItem="Ticket" Property="Description" Title="Description" />
            <RadzenGridColumn TItem="Ticket" Property="Status" Title="Status" />
            <RadzenGridColumn TItem="Ticket" Property="AssignedBay" Title="AssignedBay" />
            <RadzenGridColumn TItem="Ticket" Property="Quantity" Title="Quantity" />

            <RadzenGridColumn TItem="Ticket" Property="Id" Title="Action">
                <Template Context="data">
                    <NavLink class="btn btn-primary" href="@($"ticket/edit/{data.Id}")">Details</NavLink>
                    <NavLink class="btn btn-danger" href="#">Delete</NavLink>
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>

}

@code {
    [Inject]
    public ITicketService TicketService { get; set; }
    public IEnumerable<Ticket> Tickets { get; set; } = new List<Ticket>();
    private bool IsLoading { get; set; } = false;
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // var authenticationState = await AuthenticationState;
        // if (authenticationState.User.IsInRole(SD.Role_Admin))
        // {
        //     Tickets = await TicketService.GetAllTickets();
        // }
        // else if (!authenticationState.User.IsInRole(SD.Role_Customer))
        // {
        //     var userDTO = await localStorage.GetItemAsync<UserDTO>(SD.Local_UserDetails);
        //     Tickets = await TicketService.GetAllTicketsByBasketId(userDTO.BasketId);
        // }
        // else
        // {
        //     var uri = new Uri(NavigationManager.Uri);
        //     NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        // }
        var userInfo = await localStorage.GetItemAsync<UserDTO>
                    (SD.Local_UserDetails);
        Tickets = await TicketService.GetAllTickets(userInfo.BasketId);
    }
}
